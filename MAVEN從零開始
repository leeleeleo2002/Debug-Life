情況一:在建立MAVEN專案的時候強制關閉，導致重新開始時MAVEN專案無法運行:

最近匯入了Maven專案，不知道為什麼pom.xml一直跳紅字

且出現的錯誤都是看不懂pom.xml中的標籤

上網查了很多方法，一併嘗試後錯誤就消失了

確切的成功原因不確定，不過我嘗試的步驟在此分享一下


到{user}/.m2/repository的路徑，搜尋*.lastupdated，將搜到的檔案刪除 (.lastupdated似乎是沒有下載完成的檔案)
Eclipse → Help → Eclipse Marketplace → installed，將Maven更新
在Eclipse的Package Explorer下刪除專案，並在空白處按右鍵，選擇Import 選Maven下的Existing Maven Projects，將專案重新匯入
在專案上按右鍵 → Maven → Update Project，嘗試更新



情況二:建立MAVEN專案時

1.可能會遇到src/main資料夾錯誤:在專案案右鍵->內容->java建置路徑->移除兩個有錯誤的資料夾
再將兩個資料夾新增回來
並在路徑中加入


2.index.jsp httpServlet was not found的問題

在pom檔<dependencies><dependencies>標籤內中加入以下程式碼 <dependencies>

<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>javax.servlet-api</artifactId>
    <version>3.1.0</version>
    <scope>provided</scope>
</dependency>

3.加入Spring work

<properties>
		<spring.version>4.0.1.RELEASE</spring.version>
</properties>
  
  
  <!-- Spring dependencies -->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-core</artifactId>
		<version>${spring.version}</version>
	</dependency>

	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-web</artifactId>
		<version>${spring.version}</version>
	</dependency>

	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-webmvc</artifactId>
		<version>${spring.version}</version>
	</dependency>
  
  4.設定JAVA版本:在專案案右鍵->內容->Project Facet中設定JAVA所使用的版本:預設為1.5
  
  5.設定web檔
  
  <?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
 
  <display-name>Archetype Created Web Application</display-name>
  
  <servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
 
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
 
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
	</context-param>
 
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
  
</web-app>

6.設定:dispatcher-servlet.xml
在跟web同資料匣新增
建立一個 dispatcher-servlet.xml 跟 web.xml 相同位置

這裡的 <context:component-scan base-package="com.programcreek.helloworld.controller" /> 是看你設定的controller package 

然後需要再ＷEB-INF下新增一個 views 資料夾

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd">
 
	<context:component-scan base-package="com.programcreek.helloworld.controller" />
 
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
</beans>
  
  
 7.新建控制器:Controller在src/main/java
 建完記得回去改dispatcher-servlet.xm的
  <context:component-scan base-package="com.programcreek.helloworld.controller" />
  
  
  controller內的一般插件
  import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
  
  
  開發環境設定完可以開始撰寫啦
